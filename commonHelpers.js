import{a as b,S as w,i as n}from"./assets/vendor-f144e563.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))o(e);new MutationObserver(e=>{for(const r of e)if(r.type==="childList")for(const d of r.addedNodes)d.tagName==="LINK"&&d.rel==="modulepreload"&&o(d)}).observe(document,{childList:!0,subtree:!0});function a(e){const r={};return e.integrity&&(r.integrity=e.integrity),e.referrerPolicy&&(r.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?r.credentials="include":e.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function o(e){if(e.ep)return;e.ep=!0;const r=a(e);fetch(e.href,r)}})();const y=s=>s.map(({webformatURL:t,largeImageURL:a,tags:o,likes:e,views:r,comments:d,downloads:L})=>`
  <li class="gallery-item">
  <a class="gallery-link" href="${a}">
    <img
      class="gallery-image"
      src="${t}"
      alt="${o}"
    />
  </a>
    <div class="small-content">
        <small class="text-body-likes"><span class="text-body">Likes:</span> <span class="quantity">${e}</span></small>
        <small class="text-body-views"><span class="text-body">Views:</span> <span class="quantity">${r}</span></small>
        <small class="text-body-comments"><span class="text-body">Comments:</span> <span class="quantity">${d}</span></small>
        <small class="text-body-downloads"><span class="text-body">Dowloads:</span> <span class="quantity">${L}</span></small>
    </div>
 
    </li>
`).join(""),v="https://pixabay.com/api/",E="43896740-362a21d10e9d41ec216c05f15",f=async(s,t=1,a=15)=>{const o=new URLSearchParams({key:E,q:s,image_type:"photo",orientation:"horizontal",safesearch:!0,page:t,per_page:a});try{return(await b.get(`${v}?${o}`)).data}catch(e){throw console.log(e),e}},l=document.querySelector(".js-gallery"),P=document.querySelector(".js-search-form"),i=document.querySelector(".js-load-more"),h=document.querySelector(".js-loader");let c=1,u="";const m=15;let g=new w(".js-gallery a"),p=0;async function x(s){if(s.preventDefault(),u=s.target.elements.searchKeyword.value.trim(),u===""){l.innerHTML="",s.target.reset(),n.error({title:"Error",message:"Illegal operation",position:"topRight",timeout:2e3}),h.classList.add("is-hidden");return}c=1,p=0,l.innerHTML="",i.classList.add("is-hidden"),h.classList.remove("is-hidden");try{const t=await f(u,c,m);p=t.totalHits,t.totalHits===0?n.show({message:"Sorry, there are no images matching your search query. Please try again!",position:"topRight",timeout:2e3,color:"red"}):(l.innerHTML=y(t.hits),g.refresh(),t.hits.length<m||p<=c*m?(i.classList.add("is-hidden"),n.show({message:"We're sorry, but you've reached the end of search results.",position:"topRight",timeout:2e3,color:"red"})):i.classList.remove("is-hidden"))}catch(t){console.log(t),n.error({title:"Error",message:"Failed to fetch images. Please try again later.",position:"topRight",timeout:2e3})}finally{s.target.reset(),h.classList.add("is-hidden")}}async function S(){c+=1,h.classList.remove("is-hidden"),i.classList.add("is-hidden");try{const s=await f(u,c,m),t=y(s.hits);if(l.insertAdjacentHTML("beforeend",t),g.refresh(),s.hits.length===0||p<=c*m)n.show({message:"We're sorry, but you've reached the end of search results.",position:"topRight",timeout:2e3,color:"red"}),i.classList.add("is-hidden");else{const a=y(s.hits);l.insertAdjacentHTML("beforeend",a),g.refresh(),i.classList.remove("is-hidden");const{height:o}=l.firstElementChild.getBoundingClientRect();window.scrollBy({top:o*2,behavior:"smooth"})}}catch(s){console.error(s),n.error({title:"Error",message:"Failed to fetch images. Please try again later.",position:"topRight",timeout:2e3})}finally{h.classList.add("is-hidden")}}P.addEventListener("submit",x);i.addEventListener("click",S);
//# sourceMappingURL=commonHelpers.js.map
